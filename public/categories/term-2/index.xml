<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BCIT CST</title>
    <link>http://www.bcitcst.com/categories/term-2/index.xml</link>
    <description>Recent content on BCIT CST</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.bcitcst.com/categories/term-2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>COMP 2510 Procedural Programming in C</title>
      <link>http://www.bcitcst.com/post/term2/comp2510/</link>
      <pubDate>Thu, 22 Dec 2016 16:57:11 -0800</pubDate>
      
      <guid>http://www.bcitcst.com/post/term2/comp2510/</guid>
      <description>

&lt;p&gt;This course is probably the hardest course in second term, but it&amp;rsquo;s not as bad as some people have pictured it to be. At first, Albert comes of quite intimidating but as you get into the course, you get used to his teaching style. Textbook for this course is nonexistent so don&amp;rsquo;t go wasting your money. There&amp;rsquo;s 1 midterm, 1 final, 3 assignments and 1 lab exercise that you have to complete within your lab hours.&lt;/p&gt;

&lt;p&gt;Albert moves quite fast in the lectures and it&amp;rsquo;s pretty difficult to keep up all the time. I&amp;rsquo;d recommend writing down everything word for word that he writes on the overhead while he&amp;rsquo;s presenting. Then you can go over it later and understand what he was doing and why he was doing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Friendly tip: try to always compile the small chunk of code he goes over in lectures, try making them work and understand how its working. If you can do this then honestly I don&amp;rsquo;t see you getting below 80% in this course.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re confused about something, ask someone for help, otherwise you&amp;rsquo;ll fall behind and honestly, catching up is probably the hardest thing in this course. The hardest topics are probably strings(char arrays), arrays, pointers, and memory allocation. I would really recommend watching videos on these topics before Albert introduces them to you. So when he does introduce them to you, you&amp;rsquo;re not completely lost and have somewhat of an idea about whats going on.&lt;/p&gt;

&lt;h4 id=&#34;labs&#34;&gt;Labs&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s a single lab every week that covers the topics learned in the previous week. These labs are usually free marks, if you don&amp;rsquo;t understand what the lab wants at all then work with a partner. If you&amp;rsquo;re good at math then these labs should be pretty easy.&lt;/p&gt;

&lt;h4 id=&#34;assignments&#34;&gt;Assignments&lt;/h4&gt;

&lt;p&gt;Theres 3 assignments each worth about 10% of your overall mark I believe. Albert usually gives you tests that you can run on your assignment so you can see if your assignment meets all of the requirements or not. Pass all the tests and you&amp;rsquo;re usually guaranteed above 90% on the assignment. I&amp;rsquo;d recommend starting on the assignment as soon as it comes out, or reading it at the very least so you can process in the back of your head.&lt;/p&gt;

&lt;h4 id=&#34;midterm-final&#34;&gt;Midterm &amp;amp; Final&lt;/h4&gt;

&lt;p&gt;Albert always provides you with a review before the exam. The review is very very similar to the exam! Don&amp;rsquo;t try to memorize the answers as they will not be the same. Understand how you can reach the answers and work through the review sheets multiple times. Alberts exam&amp;rsquo;s aren&amp;rsquo;t meant to be tricky or hard, but, a lot of people fail the exams (especially the midterm). If you failed the midterm, it&amp;rsquo;s not the end of the road, you can still easily pass the course.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>